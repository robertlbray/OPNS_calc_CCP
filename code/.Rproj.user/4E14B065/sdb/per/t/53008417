{
    "collab_server" : "",
    "contents" : "sim_sequential_model <- function(val, lambda, S = 10^4){\n  left_join(val, lambda, by = 'bucket') %>%\n    group_by(bucket) %>%\n    #calc inclusive value\n    summarise(\n      lambda = unique(lambda),\n      inclusive.val = log(sum(exp(val/lambda)))\n    ) %>%\n    mutate(inclusive.val = lambda * inclusive.val) %>%\n    merge(data.frame(trial = seq(S))) %>% \n    #make first round choice\n    mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>% \n    group_by(trial) %>%\n    filter(val == max(val)) %>% \n    select(-val) %>% \n    #make second round choice\n    left_join(val, by = 'bucket') %>%\n    mutate(value = val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%\n    filter(value == max(value)) %>%\n    select(trial, bucket, choice) %>%\n    ungroup\n}  \n\nsim_simultaneous_model <- function(val, lambda, S = 10^4){\n  #simulate choices simultaneously\n  left_join(val, lambda, by = 'bucket') %>%\n    merge(data.frame(trial = seq(S))) %>%\n    mutate(\n      val = val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1), \n      val = as.numeric(val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1))\n    ) %>%\n    group_by(trial) %>%\n    filter(val == max(val)) %>% \n    select(trial, bucket, choice) %>%\n    ungroup()\n}",
    "created" : 1508196037939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3770391255",
    "id" : "53008417",
    "lastKnownWriteTime" : 1507578579,
    "last_content_update" : 1507578579,
    "path" : "~/Dropbox/teaching/OPNS523/assignments/OPNS_NestedLogit/solution/code/modules/SimChoices.R",
    "project_path" : "modules/SimChoices.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}