mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket') %>%
mutate(value = val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
filter(value == max(value)) %>%
select(trial, bucket, choice) %>%
ungroup
left_join(val, lambda, by = 'bucket')
left_join(val, lambda, by = 'bucket') %>%
merge(data.frame(trial = seq(S))) %>%
mutate(
val = val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1),
val = as.numeric(val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1))
) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
select(trial, bucket, choice) %>%
ungroup()
data <- list(
val = readRDS(paste0(var_save, 'choice_values.rds')),
lambda = readRDS(paste0(var_save, 'lambda_values.rds'))
)
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_NestedLogit_lab/solution/code/modules/simChoices.R')
sim_fun = sim_sequential_model
sim_fun(data$val, data$lambda)
sim_fun(data$val, data$lambda) ->x
h(x)
dim(x)
sim_data = x
num_boots = 3
seq(num_boots) %>%
dmap(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
}) ->y
seq(num_boots)
seq(num_boots) %>%
dmap(~{browser()
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})
data.frame(samp = ., sample_n(sim_data, nrow(sim_data),
replace = . > 1))
data.frame(samp = ., sample_n(sim_data, nrow(sim_data),
replace = . > 1)) %>% head()
seq(num_boots) %>%
map(~{browser()
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
seq(num_boots) %>%
map(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
y[[1]] %>% dim
y[[2]] %>% dim
h(x)
head(x)
h=head
y[[1]] %>% h
sim_data %>% h
y[[1]] %>% Sm
y[[1]] %>% Summarise
y[[1]] %>% Sumarise
y[[1]] %>% summarise()
y[[1]] %>% head()
y[[1]] %>% summarise()
y[[1]] %>% ungroup %>% summarise()
y[[1]] %>% class
summarise()
summarise
y[[1]] %>% head
y[[2]] %>% head
y[[3]] %>% head
seq(num_boots) %>%
dmap(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})
?dmap
seq(num_boots) %>%
map_df(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
dim(y)
h(y)
val=data$val
lambda=data$lambda
seq(num_boots) %>%
map_df(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
}) ->sim_data
group_by(sim_data, samp, bucket, choice) %>%
summarise(sim.prob=n()) %>%head
group_by(sim_data, samp, bucket, choice) %>%head
count(sim_data, samp, bucket, choice) %>% head
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob=n/sum(n)) %>%head
left_join(val, lambda, by='bucket')
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
group_by(prob, bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
prob<-left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
group_by(prob, bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
)
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
)
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
) %>%
select(bucket, choice, prob) %>%
arrange(bucket, choice) ->x
x %>% summarise(sum(prob))
h(x)
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>% head
theoretical_probabilities<-function(val, lambda){
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
) %>%
select(bucket, choice, prob) %>%
arrange(bucket, choice)
}
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>% head
ests <-
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>%
mutate(delta = sim.prob-prob) %>%
select(-c(sim.prob, prob)) %>%
dcast(samp ~ bucket + choice, value.var = 'delta', fill = 0)
ests
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>%
mutate(delta = sim.prob-prob) %>%
select(-c(sim.prob, prob)) %>%
dcast(samp ~ bucket + choice, value.var = 'delta', fill = 0) %>% {
x <-
filter(., samp == 1) %>%
select(-(1:2)) %>%
unlist
cov = select(., -(1:2)) %>%
cov()
x%*%solve(cov, x) %>%
pchisq(df = length(x)) %>%
sum(-1) %>%
prod(-1)
}
?dplyr::mutate_at
library('dplyr')
source('header.R')
?dplyr::mutate_at
expand.grid(x=1:3, y1=1:3, y2=4:6)
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6))
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6)
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% rownames_to_column()
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% melt('x')
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% melt('x') %>% mutate(value = value/x) %>% dcast(x~variable)
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% rownames_to_column %>%  melt('x') %>% mutate(value = value/x) %>% dcast(x~variable)
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% rownames_to_column %>%  head
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% rownames_to_column %>%  melt(c('rowname', 'x')) %>% mutate(value = value/x) %>% dcast(x~variable)
expand.grid(x=1:3, y1=1:3, y2=4:6, y3=3:6) %>% rownames_to_column %>%  melt(c('rowname', 'x')) %>% mutate(value = value/x) %>% dcast(rowname  + x~variable)
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_NestedLogit/solution/code/header.R')
data <- list(
val = readRDS(paste0(var_save, 'choice_values.rds')),
lambda = readRDS(paste0(var_save, 'lambda_values.rds'))
)
data
source('header.R')
dir('modules')
sim_sequential_model
c(sim_sequential_model, sim_simultaneous_model)
data <- list(
val = readRDS(paste0(var_save, 'choice_values.rds')),
lambda = readRDS(paste0(var_save, 'lambda_values.rds'))
)
sim_fun <- sim_sequential_model
sim_fun(data$val, data$lambda)
num_boots = 100
seq(num_boots)
bootstrap_choices<-function(sim_data, num_boots = 100){
seq(num_boots) %>%
map_df(~{
data.frame(
samp  =  .,
sample_n(sim_data, nrow(sim_data), replace  =  . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})
}
sim_fun(data$val, data$lambda) %>%
bootstrap_choices ->x
head(x)
tail(x)
readRDS(paste0(var_save, 'choice_values.rds'))
x <- readRDS(paste0(var_save, 'choice_values.rds'))
sim_fun(data$val, data$lambda) %>%
bootstrap_choices ->sim_data
val=data$val
lambda=data$lambda
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>%
mutate(delta = sim.prob-prob) %>%
select(-c(sim.prob, prob))->x
head(x)
tail(x)
x %>%
dcast(samp ~ bucket + choice, value.var = 'delta', fill = 0)->y
head(y)
?dcast
. = y
head(.)
head(.)
head(.)
x <-
filter(., samp == 1) %>%
select(-(1:2)) %>%
unlist
head(x)
x
filter(., samp == 1)
x <-
filter(., samp == 1) %>%
select(-(1:2)) %>%
unlist
x
filter(., samp == 1)
head(.)
cov.mat <-
select(., -(1:2)) %>%
cov
x%*%solve(cov.mat, x) %>%
pchisq(df = length(x)) %>%
sum(-1) %>%
prod(-1)
solve(cov.mat, x)
solve(cov.mat) %*%  x
left_join(val, lambda, by='bucket')
val
lambda
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
)
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))->.
.
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
sim_sequential_model
run_wald
readRDS(paste0(var_save, 'values.rds')) %>% head
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_calc_CCP/solution/code/header.R')
readRDS(paste0(var_save, 'values.rds')) %>% head
readRDS(paste0(var_save, 'CCPs.rds')) %>% head
readRDS(paste0(var_save, 'CCPs.rds')) %>%
fl(is.na(CCP)) %>%
print
readRDS(paste0(var_save, 'CCPs.rds')) %>%
filter(is.na(CCP)) %>%
print
print('NA records:')
readRDS(paste0(var_save, 'CCPs.rds')) %>%
filter(is.na(CCP)) %>%
print
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_calc_CCP/solution/code/modules/dubugger.R')
test_CCPs()
Sm
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice) %>%
summarise(CCP = sum(CCP)) %>%
summary
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice) %>%
summarise(sum(CCP)) %>%
summary
?summarise
?summary
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice)
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice) %>%
summarise(sum(CCP))
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice) %>%
dplyr::summarise(sum(CCP))
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_calc_CCP/solution/code/header.R')
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_calc_CCP/solution/code/header.R')
source('header.R')
sim_values()
calc_CCP()
sim_values()
calc_CCP()
readRDS(paste0(var_save, 'CCPs.rds')) %>%
group_by(choice) %>%
summarise(sum(CCP)) %>%
summary
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_calc_CCP/solution/code/modules/dubugger.R')
test_CCPs()
exp(1000)
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = 1000, min = .5, max = 2)
) %>%
rownames_to_column
num.choices = 10
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = 1000, min = .5, max = 2)
) %>%
rownames_to_column
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = 1000, min = .5, max = 2)
) %>%
rownames_to_column
num.choices = 1000
num.choices = 10
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column
?seq_len
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column %>%
by_row(
~rt(n = .$num, df = .$df),
.collate = 'rows'
)
?by_row
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column %>%
by_row(
~rt(n = .$num, df = .$df),
.collate = 'rows'
) %>%
select(rowname, .out) %>%
rename(
choice = 'rowname',
choice.specific.value = '.out'
)
readRDS(paste0(var_save, 'CCPs.rds')) ->.
.
group_by(., choice) %>%
summarise(sum.CCP = sum(CCP)) %>%
summary
group_by(., choice) %>%
summarise(sum.CCP = sum(CCP))
group_by(., choice) %>%
summarise(sum.CCP = sum(CCP)) %>%
summary
?replicate
?rpois()
?do
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
)
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column %>%
by_row(
~rt(n = .$num, df = .$df),
.collate = 'rows'
)
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
)
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
)
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column
data_frame(
num = 1 + rpois(n = num.choices, lambda = 3),
df = runif(n = num.choices, min = .5, max = 2)
) %>%
rownames_to_column %>%
by_row(
~rt(n = .$num, df = .$df),
.collate = 'rows'
)
